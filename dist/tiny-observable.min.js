/*!
 2023 Jason Mulligan <jason.mulligan@avoidwork.com>
 @version 2.0.0
*/
const t=()=>{},e=()=>`ob-${Math.random().toString(36).slice(2,9)}`,s="Invalid arguments";class r{constructor(t=10,s=crypto?.randomUUID??e){this.id=s,this.limit=t,this.listeners=new Map,this.hooks=new WeakMap}dispatch(t="",...e){if(0===t.length)throw new TypeError(s);return this.listeners.get(t)?.forEach((t=>t.handler.apply(t.scope,e))),this}hook(t=null,e=""){if(null===t||0===e.length)throw new TypeError(s);for(const s of Array.isArray(t)?t:[t])!1===this.hooks.has(s)&&this.hooks.set(s,new Map),!1===this.hooks.get(s).has(e)&&this.hooks.get(s).set(e,(t=>this.dispatch(e,t))),s?.addEventListener(e,this.hooks.get(s).get(e),!1);return this}off(t="",e=""){if(0===t.length)throw new TypeError(s);return 0===e.length?this.listeners.get(t)?.clear():e.length>0&&this.listeners.get(t)?.delete(e),this}on(e="",s=t,r=this.id(),i=this){if(!1===this.listeners.has(e)&&this.listeners.set(e,new Map),this.listeners.get(e).size>=this.limit)throw new Error("`Possible memory leak, more than {{LIMIT}} listeners for event: {{EVENT}}".replace("{{EVENT}}",e).replace("{{LIMIT}}",this.limit));return this.listeners.get(e).set(r,{scope:i,handler:s}),this}once(e="",s=t,r=this.id(),i=this){return this.on(e,((...t)=>{s.apply(i,t),this.off(e,r)}),r,i)}setMaxListeners(t=10){if(isNaN(t))throw new TypeError(s);return this.limit=t,this}unhook(t=null,e=""){if(null===t)throw new TypeError(s);for(const s of Array.isArray(t)?t:[t])this.hooks.has(s)&&(e.length>0&&this.hooks.get(s).has(e)?(s?.removeEventListener(e,this.hooks.get(s).get(e),!1),this.hooks.get(s)?.delete(e)):(this.hooks.get(s).forEach(((t,e)=>s?.removeEventListener(e,t,!1))),this.hooks.delete(s)));return this}}function i(t=10,s=crypto?.randomUUID??e){return new r(t,s)}export{r as Observable,i as observable};//# sourceMappingURL=tiny-observable.min.js.map
